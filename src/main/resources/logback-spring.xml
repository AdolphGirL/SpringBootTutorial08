<?xml version="1.0" encoding="UTF-8"?>

<!-- Spring Boot官方推薦使用 -spring的文件名稱，作為日誌配置的優先，而非logback.xml -->

<!-- 
	scan="true" 配置文件異動時，會重新加載
	scanPeriod="60 seconds" 監聽配志文件異動的時間 
	debug=true(默認)，會打印出logback內部的訊息，實際運行設為false
-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
	<!-- 
	contextName設置上下文名稱 ，不設製默認為default
	-->
	<contextName>logback</contextName>
	
	<!-- 
		設置變量屬性，通過設定值，可以寫入到上下文中
		name-value，後續透過${}存取 
	-->
	<property name="log.path" value="logs" />
	
	<!-- 
		appender，格式化輸出
		name，名稱
		class，指定何種輸出方式
	 -->
	<appender name="console" class="ch.qos.logback.core.ConsoleAppender">
		<!-- ThresholdFilter為攔截器，會濾掉設定級別以下的訊息
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>INFO</level>
		</filter>
		 -->
		
		<!-- 
			encoder，對日誌進行編碼
				%d{HH:mm:ss.SSS} 日誌輸出時間
				%thread 日誌輸出的進程名稱
				%-5level 日誌輸出級別，並且5個字符靠左對齊
				%logger{36} 日誌輸出者名稱
				%msg 日誌訊息
				%n 平台換行符號
		 -->
		<encoder>
			<pattern>%d{HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n</pattern>
		</encoder>
	</appender>
	
	<!--
		RollingFileAppender 切分文件日誌 
	 -->
	<appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${log.path}/logback.log</file>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 日誌切分方式，把每一天的資料寫到一個文件中 -->
			<fileNamePattern>logback.%d{yyyy-MM-dd}.log</fileNamePattern>
			<!-- 只保留最近30天的日誌 -->
			<maxHistory>30</maxHistory>
			<!-- 日誌文件上限，只要到達設定值，就會刪除舊日誌 -->
			<totalSizeCap>1GB</totalSizeCap>
		</rollingPolicy>
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>INFO</level>
		</filter>
		<encoder>
			<pattern>%d{HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n</pattern>
		</encoder>
	</appender>
	
	<!-- 開啟client logging -->
	<logger name="org.springframework.data.elasticsearch.client.WIRE" level="trace" additivity="false">
		<appender-ref ref="console"/>
	</logger>
	
	<!-- 
		root結點是必要的結點，用來指定最基礎的日誌輸出級別
		設定INFO，
	 -->
	<root level="INFO">
		<appender-ref ref="console" />
		
		<!-- 非測試環境再啟動FILE文件的Log
		<springProfile name="!dev">
			<appender-ref ref="file" />
		</springProfile>
		 -->
	</root>
	
	<!-- 範例
	logger 用來設定某一類別，日誌輸出級別
	<logger name="com.dudu.controller"/>
	 
	 additivity="false" 是否向上級logger傳的打樣訊息
	<logger name="com.dudu.controller.LearnController" level="WARN" additivity="false">
		<appender-ref ref="console"/>
	</logger>
	-->
	
	
</configuration>